# Script PowerShell pour d√©marrer le syst√®me de monitoring
# Usage: .\scripts\start-monitoring.ps1

param(
    [switch]$SkipMainApp = $false,
    [switch]$Verbose = $false
)

# Configuration
$ProjectRoot = Split-Path -Parent $PSScriptRoot
$ErrorActionPreference = "Stop"

# Fonctions utilitaires
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# V√©rification des pr√©requis
function Test-Requirements {
    Write-Info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    try {
        $dockerVersion = docker --version
        Write-Success "Docker d√©tect√©: $dockerVersion"
    }
    catch {
        Write-Error "Docker n'est pas install√© ou non accessible"
        exit 1
    }
    
    # V√©rifier Docker Compose
    try {
        $composeVersion = docker-compose --version
        Write-Success "Docker Compose d√©tect√©: $composeVersion"
    }
    catch {
        Write-Error "Docker Compose n'est pas install√© ou non accessible"
        exit 1
    }
}

# D√©marrage de l'application principale
function Start-MainApplication {
    if ($SkipMainApp) {
        Write-Info "D√©marrage de l'application principale ignor√© (--SkipMainApp)"
        return
    }
    
    Write-Info "V√©rification de l'application principale..."
    
    Set-Location $ProjectRoot
    
    # V√©rifier si l'application est d√©j√† en cours d'ex√©cution
    $runningContainers = docker-compose ps --services --filter "status=running"
    
    if ($runningContainers) {
        Write-Success "Application principale d√©j√† en cours d'ex√©cution"
    }
    else {
        Write-Info "D√©marrage de l'application principale..."
        docker-compose up -d
        
        Write-Info "Attente du d√©marrage des services (30 secondes)..."
        Start-Sleep -Seconds 30
    }
}

# D√©marrage du syst√®me de monitoring
function Start-Monitoring {
    Write-Info "D√©marrage du syst√®me de monitoring..."
    
    Set-Location $ProjectRoot
    
    # Cr√©er les r√©pertoires n√©cessaires
    $directories = @(
        "monitoring\prometheus\data",
        "monitoring\grafana\data", 
        "monitoring\alertmanager\data"
    )
    
    foreach ($dir in $directories) {
        $fullPath = Join-Path $ProjectRoot $dir
        if (!(Test-Path $fullPath)) {
            New-Item -ItemType Directory -Path $fullPath -Force | Out-Null
            Write-Info "R√©pertoire cr√©√©: $dir"
        }
    }
    
    # D√©marrer les services de monitoring
    Write-Info "Lancement des conteneurs de monitoring..."
    docker-compose -f docker-compose.monitoring.yml up -d
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Services de monitoring d√©marr√©s avec succ√®s"
    }
    else {
        Write-Error "Erreur lors du d√©marrage des services de monitoring"
        exit 1
    }
}

# V√©rification de l'√©tat des services
function Test-Services {
    Write-Info "V√©rification de l'√©tat des services..."
    
    # Attendre que les services soient pr√™ts
    Write-Info "Attente du d√©marrage complet (60 secondes)..."
    Start-Sleep -Seconds 60
    
    $services = @(
        @{Name="Prometheus"; Url="http://localhost:9090/-/healthy"; Port=9090},
        @{Name="Grafana"; Url="http://localhost:3001/api/health"; Port=3001},
        @{Name="AlertManager"; Url="http://localhost:9093/-/healthy"; Port=9093},
        @{Name="Application Metrics"; Url="http://localhost:8000/api/metrics"; Port=8000}
    )
    
    foreach ($service in $services) {
        try {
            $response = Invoke-WebRequest -Uri $service.Url -TimeoutSec 10 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Success "‚úÖ $($service.Name): http://localhost:$($service.Port)"
            }
            else {
                Write-Warning "‚ö†Ô∏è $($service.Name): R√©ponse inattendue (Code: $($response.StatusCode))"
            }
        }
        catch {
            Write-Warning "‚ö†Ô∏è $($service.Name): Non accessible sur le port $($service.Port)"
        }
    }
}

# Affichage des informations d'acc√®s
function Show-AccessInfo {
    Write-Host ""
    Write-Host "=== SYST√àME DE MONITORING D√âMARR√â ===" -ForegroundColor Cyan
    Write-Host ""
    Write-Success "üîç Prometheus (M√©triques): http://localhost:9090"
    Write-Success "üìä Grafana (Dashboards): http://localhost:3001"
    Write-Success "   ‚îî‚îÄ‚îÄ Identifiants: admin / admin123"
    Write-Success "üö® AlertManager (Alertes): http://localhost:9093"
    Write-Success "üìà Node Exporter: http://localhost:9100"
    Write-Success "üê≥ cAdvisor: http://localhost:8080"
    Write-Host ""
    Write-Info "üìã Dashboards Grafana disponibles:"
    Write-Info "   - Hospital Management - Vue d'ensemble"
    Write-Info "   - Syst√®me & Infrastructure"
    Write-Info "   - Base de Donn√©es - MySQL & Redis"
    Write-Host ""
    Write-Info "üîß Pour arr√™ter le monitoring:"
    Write-Info "   docker-compose -f docker-compose.monitoring.yml down"
    Write-Host ""
}

# Configuration post-d√©marrage
function Set-PostConfiguration {
    Write-Info "Configuration post-d√©marrage..."
    
    # Attendre que Grafana soit compl√®tement d√©marr√©
    Write-Info "Attente du d√©marrage complet de Grafana..."
    
    $maxAttempts = 30
    $attempt = 0
    
    do {
        $attempt++
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:3001/api/health" -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Success "Grafana est pr√™t"
                break
            }
        }
        catch {
            if ($attempt -lt $maxAttempts) {
                Start-Sleep -Seconds 2
            }
        }
    } while ($attempt -lt $maxAttempts)
    
    if ($attempt -eq $maxAttempts) {
        Write-Warning "Grafana met du temps √† d√©marrer, mais le processus continue..."
    }
    
    Write-Success "Configuration termin√©e"
}

# Fonction principale
function Main {
    try {
        Write-Info "üöÄ D√©marrage du syst√®me de monitoring pour l'h√¥pital"
        
        Test-Requirements
        Start-MainApplication
        Start-Monitoring
        Test-Services
        Set-PostConfiguration
        Show-AccessInfo
        
        Write-Success "üéâ Syst√®me de monitoring op√©rationnel !"
        
        # Ouvrir automatiquement Grafana dans le navigateur
        $openBrowser = Read-Host "Voulez-vous ouvrir Grafana dans votre navigateur ? (o/N)"
        if ($openBrowser -eq "o" -or $openBrowser -eq "O" -or $openBrowser -eq "oui") {
            Start-Process "http://localhost:3001"
        }
    }
    catch {
        Write-Error "Erreur lors du d√©marrage du monitoring: $($_.Exception.Message)"
        Write-Info "Consultez les logs avec: docker-compose -f docker-compose.monitoring.yml logs"
        exit 1
    }
}

# Point d'entr√©e
if ($Verbose) {
    $VerbosePreference = "Continue"
}

Main
