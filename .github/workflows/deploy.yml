name: Deployment Pipeline

on:
  push:
    branches:
      - main        # Production
      - develop     # Staging
    tags:
      - 'v*'        # Releases

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Déploiement en staging (branche develop)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Images
      run: |
        # Build backend
        docker build -f Dockerfile.backend -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:staging .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:staging
        
        # Build frontend
        docker build -f Dockerfile.frontend -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:staging .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:staging

    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/hospital-app-staging
          
          # Backup current deployment
          docker-compose down
          
          # Pull new images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:staging
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:staging
          
          # Update docker-compose with new images
          sed -i 's|image: .*backend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:staging|g' docker-compose.staging.yml
          sed -i 's|image: .*frontend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:staging|g' docker-compose.staging.yml
          
          # Deploy
          docker-compose -f docker-compose.staging.yml up -d
          
          # Run migrations
          docker-compose -f docker-compose.staging.yml exec -T backend php artisan migrate --force
          
          # Clear caches
          docker-compose -f docker-compose.staging.yml exec -T backend php artisan config:clear
          docker-compose -f docker-compose.staging.yml exec -T backend php artisan cache:clear

  # Déploiement en production (branche main)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    needs: []

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Production Images
      run: |
        # Build backend
        docker build -f Dockerfile.backend -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest .
        docker build -f Dockerfile.backend -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
        
        # Build frontend
        docker build -f Dockerfile.frontend -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest .
        docker build -f Dockerfile.frontend -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

    - name: Create Backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/hospital-app-production
          
          # Create database backup
          docker-compose exec -T mysql mysqldump -u root -p$MYSQL_ROOT_PASSWORD hospital_db > backup_$(date +%Y%m%d_%H%M%S).sql
          
          # Keep only last 7 backups
          ls -t backup_*.sql | tail -n +8 | xargs -r rm

    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/hospital-app-production
          
          # Pull new images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          
          # Update docker-compose with new images
          sed -i 's|image: .*backend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}|g' docker-compose.production.yml
          sed -i 's|image: .*frontend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}|g' docker-compose.production.yml
          
          # Rolling update
          docker-compose -f docker-compose.production.yml up -d --no-deps backend
          docker-compose -f docker-compose.production.yml up -d --no-deps frontend
          
          # Run migrations
          docker-compose -f docker-compose.production.yml exec -T backend php artisan migrate --force
          
          # Clear caches
          docker-compose -f docker-compose.production.yml exec -T backend php artisan config:clear
          docker-compose -f docker-compose.production.yml exec -T backend php artisan cache:clear
          
          # Health check
          sleep 30
          curl -f http://localhost:8000/api/health || exit 1

    - name: Notify Deployment Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 Déploiement en production réussi!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Rollback on Failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/hospital-app-production
          
          # Rollback to previous version
          docker-compose -f docker-compose.production.yml down
          git checkout HEAD~1 docker-compose.production.yml
          docker-compose -f docker-compose.production.yml up -d
          
          echo "❌ Rollback effectué suite à l'échec du déploiement"

  # Release deployment (tags)
  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Release Version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## Changements dans cette version
          
          ### 🚀 Nouvelles fonctionnalités
          - [À compléter]
          
          ### 🐛 Corrections de bugs
          - [À compléter]
          
          ### 🔧 Améliorations
          - [À compléter]
